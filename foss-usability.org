F/OSS and Usability

* F/OSS can benefit from the skills of usability specialists
** Much F/OSS is developed with the interface that the developer themself would use
** The usability tends to be focused on expert users who do cool things with the software rather than beginners
** Beginner usability can be a bigger influence on uptake
** Even experienced users can have problems with pieces of F/OSS that they are not familiar with
** There is a tendancy to flame users who complain about usability
** Usability needs to be considered from the beginning
** It has been argued that developing highly usable software is "an order of magnitude" more difficult
* F/OSS processes may not be conducive to traditional usability engineering methodologies
** Few experienced HCI professionals work on F/OSS projects
** Despite this, every developer tends to have an opinion on the interface - too many cooks in the kitchen!
** Clout in project discussion often correlates with patches provided, and HCI professionals do not focus on producing code
** Usability is usually only sought after the interface has already been designed
** Target audience is often unclear
** Little interest in following heavyweight usability methodologies
** Developers self-select for tasks, and usability is not that attractive to many developers
** Because people have different preferences, there is a tendency to add many unnecessary preferences to accomodate everyone
*** this makes it hard to find the preferences you need
*** it is also harder to test and debug, and there is more code complexity
*** It is hard to get rid of crufty features without offending the people who deveoped it
** Some of the F/OSS motivation is related to recognition from peers, and there may not be enough usability expert peers to attract other usability experts
** Project members tend to hand an understanding of usability that is similar to that of HCI experts
** It may be necessary to reconceptualize existing HCI techniques to better fit within the development approach and motivation systems prevalance in F/OSS development
*** One such technique may be design-by-blog
**** An idea is proposed on a personal blog
**** The merits of the idea are discussed in the comments
** Some F/OSS developers believe it is important to discover user needs, while others believe that these needs come passively through bug reports and feature requests
*** This is interesting though, since it presupposes that users know what kinds of features will best satisfy their needs
*** To some extent it seems to think in terms of features rather than the problems the user has
** It can be difficult to get at the real problems that the user has
*** Their description of the issues may be vague, such as "I've tried X and Y, and Y is better."
** Some F/OSS developers may not want a usability expert involved, out of concern that the involvement of an expert may override the democratic decision making process of the project
** Usability recommendations may not fit well within the short iterations favored by some F/OSS projects
** Some developers resent "drive by" usability reviews
* Why F/OSS Usability tends to lag
** Volunteer-produced software in general tends to have this property
** Weak incentives for increased usability
*** If it is software to scratch a personal itch, the developer understands the esoteric interface
*** Usability is not interesting to many volunteer developers and they self-select tasks, so few choose the usability projects
*** Proprietary software makers make more money if software is more usable - more users for F/OSS means more bugs and maintainence work
** Many programmers are not good usability designers
** Design suggestions are often not invited or welcome
** Usability is hard to measure
** Coding Before Design
*** Much F/OSS software is coded without a thorough design being done first
*** Software designed first tends to be more usable
*** There is often an intention to "add the interface" later
** Imiatation of Microsoft or Apple
*** This is not because F/OSS developers are not creative, but because users expect something that behaves the same
*** If they want people to switch, they have to have a similar interface
** People may complain if the interface is changed
*** eg, the adoption of the "Ribbon" in OpenOffice
** Mediocrity through Modularity
*** There is a temptation to build everything as reusable libraries that a front end can be tacked on to
*** However, these modules often have poor integration
*** Libraries are rarely designed with usability in mind
**** eg, if a progress bar is needed, you need feedback from the library to implement it, lest you be stuck with a throbber
* F/OSS usability may be one reason for a relative lack of adoption of F/OSS
* Usability and Open Source Software advocates a usability reporting tool like crash reporting
* Definitions of Usability
F/OSS developers do not agree on a single definition of usability. Some definitions proposed are:
** Effectiveness
*** Accuracy, Completeness, Productivity
** Efficiency
*** Learning Time, Intuitiveness, Resources Spent
** Satisfaction
*** Attitude to System, Entertainment Value
** Technical Property - Functionality Provided
* Current F/OSS Usability Practices
** GNOME Human Interface Guidelines
*** The guideline document itself does not seem to have very high usability - I want one scrollable document, rather than a plethora of pages I have to constantly click through
*** Consists of a series of general guidelines to help developers produce usable interfaces
*** Intended to make things easier for developers, rather than imposing additional burdens of usability
*** Some valuable and non-obvious advice
*** Has some good notes about icons in the notification area - these often proliferate and the GNOME guidelines advise to reserve the notification area for temporary notifications
*** Some GNOME applications use conventions that the guide recommends against
*** One of the pieces of advice that struck a chord with me is the choices of color - I have often been guilty of using color to distinguish elements, particularly green and red
