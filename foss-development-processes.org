Characteristic Development Practices in the F/OSS Community

* Motivations for Free and Open Source Software Development
** The Software is needed for personal use
*** Raymond describes this as a common source
*** There are many cases where a F/OSS project was not started for personal use
** Fun or Personally Rewarding
** Improve Skill/Learning
*** This learning can take the form of learning from other developers
*** It can also take the form of learning for one-self by developing something related
*** Developers can also learn tacit knowledge that is not provided in written tutorials or other such resources
** Reputation
** Contribution/Philanthropy
** Career Advancement
*** This may be particularly valuable for usability experts
**** since there are few in open source, those who get involved may be able to have more impact
**** however, there are some barriers they have to get past (described elsewhere)
** Ideological Beliefs
*** Freedom of Expression
*** Freedom of Choice
** Social Networking
** Use of F/OSS for work, and fixing bugs that would have to be fixed for work or adding features to make work easier
* Requirement Specifications are usually less formal than corporate software development efforts
* Highly distributed collaborative development
** Using simple, already existing communications methods
** Common means of communication
*** Mailing Lists
*** Forums
*** Newgroups
*** IM or IRC
*** Use cases as web pages
*** How-tos and Tutorials
*** Wikis
*** Tradiaional Documentation
*** External Publications
*** Web Portals for locating all of these resources
** Communication also occurs through the artifacts themselves
** An understanding of the hybridization of artifacts and dialogue is essential to accurate analysis of the collaboration in Open Source projects
* Socialization
** Socialization of Newcomers is crucial
** Projects which fail to attract and retain new contributors rarely get far
** Contributors eventually lose interest, so some turnover is necessary
** Managing the turnover is essential to prevent the project from faltering
** May bear resemblance to an apprenticeship in some ways
** Many of the aspects of apprenticeship that are considered crucial are missing
** There appears to be little teaching as one would expect in an apprenticeship - new contributors must learn from observation
** Often modelled as a skill-based meritocracy
** To gain influence over a FOSS project, one must understand the social network in place
** The social network is often not easily discovered
*** lurking can help
* Skill-based meritocracy
** People self-select for FOSS projects
** Pre-existing skills are usually required
** Those with the skills tend to have more clout
** Developers tend to self-organize around the expertise, reputation, and accomplishments of core developers
** Ideology can sometimes also play a part
** May not properly resemble either the Cathedral or Bazaar models
** There is some political manuevering involved, so the pure meritocracy model may be over-simplified
** A poular view supports a linear progression from role to role based on the quality of code contributions
**** this view has been criticized
**** some people fail to progress by pushing too fast
**** some have onerous personalities or clash with others on the project
**** not all contributors wish to become a core developer
**** most people do not evolve beyond the level of bug reporter
* Open Bug Reporting
** In Open Bug Reporting systems, most bug reports are not useful
** Most useful reports come from a small number of good reporters
** It appears the advantage of an open bug reporting system is in cultivating good reporters, rather than mass involvement
** Non-power users reports included a lot of duplicate reports or ones that were not as useful
** The better non-power user reports for Firefox occurred before the 1.0 release
** Some power-users made requests for narrow use cases
** It appears that many users did not attempt to fix the problem themselves before reporting a bug
