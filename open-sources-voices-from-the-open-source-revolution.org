Open Sources: Voices from the Open Source Revolution

* Introduction
** Linus Pauling vs. Watson and Crick
*** Watson and Crick first figured out the structure of DNA
*** There was competition between Watson/Crick's lab and that of Linus Pauling
*** Watson and Crick tried to keep it a secret, but this stifled scientific progress
** Science is Open Source
** There is profit in keeping secrets, but it is harmful to society
** RMS wanted free software and promoted it's benefits for freedom
** Businesses were not that interested in the freedom aspects
** A new marketing campaign was created with the term "Open Source"
** The Open Source definition is not as strict as the GNU GPL
** Industry can provide a great dea of funding for research, but they have vested interests
** Some companies make money from Open Source, such as Red Hat
*** Money can be made from offering convenience, service, and support
*** Sendmail offers a proprietary version, and an open source version that lags one year behind
** Open Source supports innovation
*** Sharing makes software more robust
*** Given enough eyeballs, all bugs are shallow
*** Minimizes duplication of effort
*** Someone can pick up where another leaves off
**** This is a common issue in software development - a persons interest and passion wanes after a while
** Open Source is doing very well in the server space
*** Apache controls over half the web serving market
*** Microsoft claims over half
**** But they exclude open source solutions
**** In total they control 20%
*** Proprietary *NIXes are struggling against Linux
** There is a risk of forks
*** Sufficiently open development processes reduce the incidence of detrimental forks
** Many Open Source developers get a reputation from their work
*** This benefits them in finding jobs
*** They also like te ego stroking
*** Developers can be passionate about the project and not feel "forced" to do it
** Open Source may be an area of great investment in the future (as of writing, hasn't materialized to the extent the author suggests)
** The Internet has made information sharing much easier
*** This has benefitted Open Source greatly
*** Open Source may be an idea whose time has come
* The Revenge of the Hackers
** ESR was surprised at the quality of Linux
** Brook's Law implied hat such a project should be a flailing mess
** They seemed to have a method that worked very well, but could not put it into words
** ESR wrote the Cathedral and the Bazaar as an attempt to explain it
** Netscape open sourced Netscape in an attempt to fight back against Microsoft
*** CatB had a big impact on Netscape
*** ESR claims that it was a fundamental inspiration, but this is contested
*** CEO of Netscape claims they were already considering it
** The success of Netscape was considered critical for the hacker culture to be taken seriously by business
** A marketing campaign was required - the "Open Source" brand was that marketing campaign
** Association with the term "free software" was considered harmful to the brand
*** gratis/libre confusion
*** perceived hostility towards "intellectual property"
** Key themes of the tactics that would be used
*** A focus on capturing the attention of top management, rather than appealing to engineers at the bottom
*** Linux as the poster child
*** Aim at fortune 500 companies
*** Capturing mainstream media
*** Open Source certification to prevent corruption by large vendors
** A public face was needed to capture the media's attention: ESR took on the job
** There was some concern that the free software community would not buy into the new brand, but many people did
** The less extreme position of Open Source was favored by some over the more philosophical Free Software
** GUIs may be the factor limiting adoption of open source software
* The Open Source Definition
** Open Source gives software a longer usable life and allows users to always access the latest versions
** The Open Source Definition is a bill of rights for the computer user
** These rights keep contributors on a level playing field
** The success of open source is partially because the software can be copied at little cost
* A Brief History of Hackerdom
** Lots of historical details aready covered
** ESR describes LISP as an AI language :[
* Twenty Years of Berkeley Unix
** An early Unix was installed at Berkeley
** There were bugs, and Berkeley and Bell cooperated to improve the system
** A Pascal system and an editor called ex were also developed
** These were distributed by the "Berkeley Software Distribution"
** Eventualy, vi was written
** On a later version of Unix (with new hardware) they developed a virtual memory system
** Eventually, Bell was no longer doing Unix research
** Once again, new hardware was needed, and with it, a need to port software
** Berkeley took on the further development of Unix
** At some points, the BSD system was more popular than the commercial System V, but users usually switched back when System V caught up again
** BSD source was available under liberal licensing terms
** They sold copies, but it was also available for free from people who already had a copy
** People bought it anyway, which helped to support the work
** They got contributors to rewrite many utilities, which allowed them to release more complete source code
** The flood of patches and contributions became too much for one person to bear, and the NetBSD group took over handling the updates
** NetBSD went after the hardcore users
** FreeBSD formed shortly after and targetted more mainstream users
** OpenBSD eventually spun off from NetBSD with a focus on security
** There was eventually a suit against a distributor of a BSD based system which used the Unix name in advertisements
** BSD has formed the basis for many proprietary *NIXes, including Mac OS X
* The Linux Edge
** Linux is widely used in a variety of appications
** Linux has succeeded because of it's design principles and development model
** It is the most widely ported operating system available on PCs, but it was not planned that way
** Linux is compatible with Unix, and follows the Unix heritage, but is not part of the Unix family tree
** When Linux was developed, microkernels were thought to be the key to a portable OS
** Linux did not use the microkernel model
** We're still waiting on mature microkernels... :S
** Creating portable code does not require an abstraction layer, just intelligent programming
** Adding new interfaces is risky because you can never get rid of them
** Some ugly interfaces were inherited from Unix
** The kernel is pretty mature and most new progress is expected in user space
** Sometime somene may make a new OS with binary compatibility that eventually replaces Linux without the unnecessary baggage
* Hardware, Software, and Infoware
** Web sites are becoming like applications
** One might dub them "information applications" or "infoware"
** Tim O'Reilly makes many sweeping generalizations about web sites vs. applications
*** He seems to be suggesting that desktop apps have esoteric interfaces, while web sites have easy interfaces
** The paradigm shift to the web may benefit Open Source since much of the Web's technologies are open

