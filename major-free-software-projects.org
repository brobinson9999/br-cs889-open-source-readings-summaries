Major Free/Open Source Software Projects

* Debian
** Debian is a GNU/Linux distribution
** The Project is considering other kernels such as the HURD
** The Project has committed to abide by the Debian Social Contract
*** Debian will remain 100% free (libre)
*** We will give back to the free software community
*** We will not hide problems
*** Our priorities are our users and free software
*** Support the availability of works that do not meet our free software standards (though they are not part of the Debian system)
** Bruce Perens was the project leader for a time
** Formed the basis for Ubuntu
** Provides it's own modified versions of Firefox and Thunderbird
* Mozilla Project
** The Mozilla Foundation is a non-profit organization which sets policies, operates key infrastructure, and controls the trademarks associated with the Mozilla Project
** The Mozilla Foundation owns two for-profit subsidiaries
*** Mozilla Corporation, which hires developers and coordinates releases of Firefox
*** Mozilla Messaging Inc., which primarily develops Thunderbird
** Mozilla Europe, Mozilla Japan, and Mozilla China also exist
*** They are non-profit organizations whose mission is to help promote and deploy Mozilla products and projects
*** They are independant of the Mozilla Foundation
** Mozilla initially had difficulty attracting enough contributors
** Early expectations may have been set too high
** Participation started to increase when documentation, tutorials, and development processes refined
** mozilla.org gives only limited commit access and retains the right to remove comitters
** Mozilla enforces module ownership
** The level of productivity in the Mozilla project appears to be as good or better than commercial projects
* The GIMP (GNU Image Manipulation Program)
** The vision is to become a high-end graphics application
** Often compared unfavorably to Photoshop
** There are many variants of GIMP
** GTK+ came from GIMP, and GTK+ is the basis for GNOME
** GIMP was used to draw the original Tux
* GTK+
** GTK+ came from GIMP, and GTK+ is the basis for GNOME
** GTK+ is a cross platform widget toolkit for creating graphical user interfaces
** One of the most popular widget toolkits for the X window system
** Uses different display engines to try to have a native look and feel
** Uses a non-standard object system
** A programming language, Vala, was developed to make working with that object system less onerous
* Qt
** A cross-platform application development framework for developing GUI programs
** Similar in nature to GTK+
** Written in C++, but like GTK+, builds in non-standard features
** A preprocessor is used to accomplish the non-standard features
** Was proprietary on Windows and Mac OS X at one point
** It is now available under the LGPL
** To prevent Qt from being dominant, GNOME was started, which uses GTK+
* Blender
** Blender is a 3D graphics application similar to 3D studio
** Available on a number of operating systems
** Supports Python for scripting
** Originally was in-house, but it was open sourced for a fee of 100 kEuros
** Has low system requirements
** Advanced in some ways but lags behind competing products in other areas
** Some major projects have been developed using Blender
* Apache
** Open source is often characterized as a fundamentally new way of producing software
** Open source may pose a serious challenge to the commercial software businesses that dominate most software markets today
** Apache is the most widely deployed web server
** There are several avenues for reporting bugs
*** The mailing list is most used
*** The bug tracking system is occasionally used, but usually it is an individual triaging new bug reports and forwarding the major ones to the mailing list
*** A newsgroup exists but has a poor signal to noise ratio
** Most work is done by the core developers
** There is a large number of minor contributors
** The effect is lesser but still noticeable when only bug fixes are considered
** Proprietary software shows a similar curve
** Apache developers appear to be almost as productive as full time developers on proprietary software
** Core developers tend to work on problems that are identified with areas of the code with which they are most familiar
** New developers tend to pick up where someone else has left off, or in a new area that is under development
** When multiple potential solutions exist, the core developer usually forwards options to the mailing list to get feedback
** Each developer does their own testing
** Changes are either committed immediately, then reviewed, or posted to the mailing list as a patch
* OpenOffice
** Currently undergoing a major usability project
** They cite many problems with the interface
*** The interface is seen as being "outdated"
*** They make repeated references to the interface being ugly or unappealing
*** I think they are approaching this the wrong way, "ugliness" is probably not a major usability factor
*** I would prefer to see a more positive motivation for the project rather than a self-deprecating one
** It's good that they are persuing this ut their user surveys haven't been updated in a while
* Mono
** Attempt to create a free implementation of .NET
** Mostly complete, but not all areas are stable and there are some missing pieces
** There are concerns that some parts of .NET and/or C# could be patented by Microsoft
** Some argue against supporting .NET since it could put free software projects at risk if Microsoft exercises patents against .NET or C# projects
** Novell's controversial patent deal covers Mono, but only for Novell's customers

